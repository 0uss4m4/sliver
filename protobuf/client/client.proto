syntax = "proto3";
package clientpb;

import "common/common.proto";


// [ generic ] ----------------------------------------
message Version {
  int32 Major = 1;
  int32 Minor = 2;
  int32 Patch = 3;

  string Commit = 4;

  enum Component {
    ConsoleClient = 0;
    GUIClient = 1;
    Server = 2;
    Sliver = 3;
  }
}

// [ core ] ----------------------------------------

message Session {
  uint32 ID = 1;
  string Name = 2;
  string Hostname = 3;
  string Username = 4;
  string UID = 5;
  string GID = 6;
  string OS = 7;
  string Arch = 8;
  string Transport = 9;
  string RemoteAddress = 10;
  int32 PID = 11;
  string Filename = 12; // Argv[0]
  string LastCheckin = 13;
  string ActiveC2 = 14;
  string Version = 15;
}

message ImplantC2 {
  uint32 Priority = 1;
  string URL = 2;
  string Options = 3; // Protocol specific options
}

message ImplantConfig {
  string GOOS = 1;
  string GOARCH = 2;
  string Name = 3;
  string CACert = 4;
  string Cert = 5;
  string Key = 6;
  bool Debug = 7;
  bool ObfuscateSymbols = 30;

  uint32 ReconnectInterval = 8;
  uint32 MaxConnectionErrors = 9;

  // c2
  repeated ImplantC2 C2 = 10;
  repeated string CanaryDomains = 11;

  bool LimitDomainJoined = 20;
  string LimitDatetime = 21;
  string LimitHostname = 22;
  string LimitUsername = 23;

  enum OutputFormat {
    SHARED_LIB = 0;
    SHELLCODE = 1;
    EXECUTABLE = 2;
  }
  OutputFormat Format = 25;
  bool IsSharedLib = 26;

  string FileName = 27;
}

// Configs of previously built implants
message ImplantBuilds {
  map<string, ImplantConfig> Configs = 1;
}

// DNSCanary - Single canary and metadata
message DNSCanary {
  string ImplantName = 1;
  string Domain = 2;
  bool Triggered = 3;
  string FristTriggered = 4;
  string LatestTrigger = 5;
  uint32 Count = 6;
}

message Canaries {
  repeated DNSCanary Canaries = 1;
}

message Profile {
  string Name = 1;
  ImplantConfig Config = 2;
}

message Profiles {
  repeated Profile List = 1;
}

message Regenerate {
  string ImplantName = 1;
  common.File File = 2;
}

message Job {
  int32 ID = 1;
  string Name = 2;
  string Description = 3;
  string Protocol = 4;
  int32 Port = 5;

  repeated string Domains = 6;
}

message JobKillReq {
  int32 ID = 1;

  common.Request Request = 9;
}

message JobKill {
  int32 ID = 1;
  bool Success = 2;

  string Err = 3;
}

message Jobs {
  repeated Job Active = 1;
}

// [ listeners ] ----------------------------------------
message MTLSReq {
  string Server = 1;
  int32 LPort = 2;

  common.Request Request = 9;
}

message MTLS {
  int32 JobID = 1;
}

message TCPReq {
  string Server = 1;
  int32 LPort = 2;

  common.Request Request = 9;
}

message TCP {
  int32 JobID = 1;
}

message DNSReq {
  repeated string Domains = 1;
  bool Canaries = 2;
  int32 LPort = 3;

  common.Request Request = 9;
}

message DNS {
  int32 JobID = 1;
}

message HTTPReq {
  string Domain = 1;
  string Iface = 2;
  int32 LPort = 3;
  bool Secure = 4; // Enable HTTPS
  string Website = 5;
  bytes Cert = 6;
  bytes Key = 7;
  bool ACME = 8;

  common.Request Request = 9;
}

message HTTP {
  int32 JobID = 1;
}

// [ commands ] ----------------------------------------
message Sessions {
  repeated Session Sessions = 1;
}

message GenerateReq {
  ImplantConfig Config = 1;

  common.Request Request = 9;
}

message Generate {
  File File = 1;
}

message MSFReq {
  string Payload = 1;
  string LHost = 2;
  int32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;

  common.Request Request = 9;
}

message MSFInjectReq {
  string Payload = 1;
  string LHost = 2;
  int32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;
  int32 PID = 8;

  common.Request Request = 9;
}

message TaskReq {
  bytes Data = 1;
  bool RwxPages = 2;
  uint32 Pid = 3;

  common.Request Request = 9;
}

message MigrateReq {
  uint32 Pid = 1;
  SliverConfig Config = 2;

  common.Request Request = 9;
}

message GetSystemReq {
  SliverConfig Config = 1;
  string HostingProcess = 2;

  common.Request Request = 9;
}

message EggConfig {
  enum EggProtocol {
    TCP = 0;
    HTTP = 1;
    HTTPS = 2;
  }
  EggProtocol Protocol = 1;
  string Host = 2;
  uint32 Port = 3;
  string Arch = 4;
  string Format = 5;
}

message EggReq {
  SliverConfig Config = 1;
  EggConfig EConfig = 2;
}
message Egg {
  bytes Data = 1;
  string Filename = 2;
  int32 JobID = 3;
}

message SideloadReq {
  bytes Data = 1;
  string ProcName = 2;
  string Args = 3;
  string EntryPoint = 4;
  uint32 SliverID = 9;
}

// [ Tunnels ] ----------------------------------------
message TunnelCreateReq {
  uint32 SessionID = 9;
}

message TunnelCreate {

  uint64 TunnelID = 8;
  uint32 SessionID = 9;
}

message TunnelCloseReq {
  uint64 TunnelID = 8;
  uint32 SessionID = 9;
}

// [ events ] ----------------------------------------
message Client {
  int32 ID = 1;
  string OperatorName = 2;
}

message Event {
  string EventType = 1;
  Session Session = 2;
  Job Job = 3;
  Client Client = 4;
  bytes Data = 5;

  string Err = 9;
}

message Operators { 
  repeated Operator Operators = 1;
}

message Operator {
  Client Client = 1;
  bool Online = 2;
}

// [ websites ] ----------------------------------------
message WebContent {
  string Path = 1;
  string ContentType = 2;
  uint64 Size = 3;

  bytes Content = 9;
}

message Website {
  string Name = 1;
  map<string, WebContent> Content = 2;
}

message Websites {
  repeated Website Sites = 1;
}
