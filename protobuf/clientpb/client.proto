syntax = "proto3";
package clientpb;
option go_package = "github.com/bishopfox/sliver/protobuf/clientpb";

import "commonpb/common.proto";


// [ Version ] ----------------------------------------
message Version {
  int32 Major = 1;
  int32 Minor = 2;
  int32 Patch = 3;

  string Commit = 4;
  bool Dirty = 5;
  int64 CompiledAt = 6;

  string OS = 7;
  string Arch = 8;
}

// [ Core ] ----------------------------------------
message Session {
  string ID = 1;
  string Name = 2;
  string Hostname = 3;
  string UUID = 4;
  string Username = 5;
  string UID = 6;
  string GID = 7;
  string OS = 8;
  string Arch = 9;
  string Transport = 10;
  string RemoteAddress = 11;
  int32 PID = 12;
  string Filename = 13; // Argv[0]
  int64 LastCheckin = 14;
  string ActiveC2 = 15;
  string Version = 16;
  bool Evasion = 17;
  bool IsDead = 18;
  int64 ReconnectInterval = 19;
  string ProxyURL = 20;
  bool Burned = 22;
  repeated string Extensions = 23;
  // string ConfigID = 24;
  int64 PeerID = 25;
  string Locale = 26;
  int64 FirstContact = 27;
}

message Beacon {
  string ID = 1;
  string Name = 2;
  string Hostname = 3;
  string UUID = 4;
  string Username = 5;
  string UID = 6;
  string GID = 7;
  string OS = 8;
  string Arch = 9;
  string Transport = 10;
  string RemoteAddress = 11;
  int32 PID = 12;
  string Filename = 13; // Argv[0]
  int64 LastCheckin = 14;
  string ActiveC2 = 15;
  string Version = 16;
  bool Evasion = 17;
  bool IsDead = 18;

  string ProxyURL = 20;
  int64 ReconnectInterval = 21;
  int64 Interval = 22;
  int64 Jitter = 23;
  bool Burned = 24;
  int64 NextCheckin = 25;

  int64 TasksCount = 26;
  int64 TasksCountCompleted = 27;

  string Locale = 28;
  int64 FirstContact = 29;
}

message Beacons {
  repeated Beacon Beacons = 2;
}

message BeaconTask {
  string ID = 1;
  string BeaconID = 2;
  int64 CreatedAt = 3;
  string State = 4;
  int64 SentAt  = 5;
  int64 CompletedAt = 6;
  bytes Request = 7;
  bytes Response = 8;
  string Description = 9;
}

message BeaconTasks {
  string BeaconID = 1;
  repeated BeaconTask Tasks = 2;
}

message ImplantC2 {
  uint32 Priority = 1;
  string URL = 2;
  string Options = 3; // Protocol specific options
}

enum OutputFormat {
  SHARED_LIB = 0;
  SHELLCODE = 1;
  EXECUTABLE = 2;
  SERVICE = 3;
  THIRD_PARTY = 4;
}

message ImplantConfig {
  string ID = 1;
  bool IsBeacon = 2;
  int64 BeaconInterval = 3;
  int64 BeaconJitter = 4;

  string GOOS = 5;
  string GOARCH = 6;
  string Name = 7;

  bool Debug = 8;
  bool Evasion = 9;
  bool ObfuscateSymbols = 10;
  string TemplateName = 11;

  string MtlsCACert = 20;
  string MtlsCert = 21;
  string MtlsKey = 22;

  string ECCPublicKey = 23;
  string ECCPrivateKey = 24;
  string ECCPublicKeySignature = 25;
  string MinisignServerPublicKey = 26;

  string WGImplantPrivKey = 30;
  string WGServerPubKey = 31;
  string WGPeerTunIP = 32;
  uint32 WGKeyExchangePort = 33;
  uint32 WGTcpCommsPort = 34;

  int64 ReconnectInterval = 40;
  uint32 MaxConnectionErrors = 41;
  int64 PollTimeout = 42;

  // c2
  repeated ImplantC2 C2 = 50;
  repeated string CanaryDomains = 51;
  string ConnectionStrategy = 52;

  bool LimitDomainJoined = 60;
  string LimitDatetime = 61;
  string LimitHostname = 62;
  string LimitUsername = 63;
  string LimitFileExists = 64;
  string LimitLocale = 65;

  OutputFormat Format = 100;
  bool IsSharedLib = 101;
  string FileName = 102;
  bool IsService = 103;
  bool IsShellcode = 104;

  bool RunAtLoad = 105;
}

message ExternalImplantConfig {
  ImplantConfig Config = 1;
  string OTPSecret = 2;
}

message ExternalImplantBinary {
  string Name = 1;
  string ImplantConfigID = 2;
  commonpb.File File = 3;
}

// Configs of previously built implants
message ImplantBuilds {
  map<string, ImplantConfig> Configs = 1;
}

message CompilerTarget {
  string GOOS = 1;  // The server's OS
  string GOARCH = 2;  // The server's Arch
  OutputFormat Format = 3;
}

message CrossCompiler {
  string TargetGOOS = 1;  // The server's OS
  string TargetGOARCH = 2;  // The server's Arch
  string CCPath = 3;
  string CXXPath = 4;
}

message Compiler {
  string GOOS = 1;  // The server's OS
  string GOARCH = 2;  // The server's Arch
  repeated CompilerTarget Targets = 3;
  repeated CrossCompiler CrossCompilers = 4;
  repeated CompilerTarget UnsupportedTargets = 5;
}

message DeleteReq {
  string Name = 1;
}

// DNSCanary - Single canary and metadata
message DNSCanary {
  string ImplantName = 1;
  string Domain = 2;
  bool Triggered = 3;
  string FirstTriggered = 4;
  string LatestTrigger = 5;
  uint32 Count = 6;
}

message Canaries {
  repeated DNSCanary Canaries = 1;
}

// UniqueWGIP - Unique wireguard IP
message UniqueWGIP {
  string IP = 1;
}

message ImplantProfile {
  string Name = 1;
  ImplantConfig Config = 2;
}

message ImplantProfiles {
  repeated ImplantProfile Profiles = 1;
}

message RegenerateReq {
  string ImplantName = 1;
}

message Job {
  uint32 ID = 1;
  string Name = 2;
  string Description = 3;
  string Protocol = 4;
  uint32 Port = 5;

  repeated string Domains = 6;
}


// [ Jobs ]  ----------------------------------------
message Jobs {
  repeated Job Active = 1;
}

message KillJobReq {
  uint32 ID = 1;
}

message KillJob {
  uint32 ID = 1;
  bool Success = 2;
}

// [ Listeners ] ----------------------------------------
message MTLSListenerReq {
  string Host = 1;
  uint32 Port = 2;
  bool Persistent = 3;
}

message MTLSListener {
  uint32 JobID = 1;
}

message WGListenerReq {
  string Host = 6;
  uint32 Port = 1;
  string TunIP = 2;
  uint32 NPort = 3;
  uint32 KeyPort = 4;
  bool Persistent = 5;
}

message WGListener {
  uint32 JobID = 1;
}

message DNSListenerReq {
  repeated string Domains = 1;
  bool Canaries = 2;
  string Host = 3;
  uint32 Port = 4;
  bool Persistent = 5;
  bool EnforceOTP = 6; 
}

message DNSListener {
  uint32 JobID = 1;
}

message HTTPListenerReq {
  string Domain = 1;
  string Host = 2;
  uint32 Port = 3;
  bool Secure = 4; // Enable HTTPS
  string Website = 5;
  bytes Cert = 6;
  bytes Key = 7;
  bool ACME = 8;
  bool Persistent = 9;
  bool EnforceOTP = 10;
  int64 LongPollTimeout = 11;
  int64 LongPollJitter = 12;
  bool RandomizeJARM = 13; // Only valid with Secure = true
}

// Named Pipes Messages for pivoting
message NamedPipesReq {
  string PipeName = 16;

  commonpb.Request Request = 9;
}

message NamedPipes {
  bool Success = 1;
  string Err = 2;

  commonpb.Response Response = 9;
}

// TCP Messages for pivoting
message TCPPivotReq {
  string Address = 16;

  commonpb.Request Request = 9;
}

message TCPPivot {
  bool Success = 1;
  string Err = 2;

  commonpb.Response Response = 9;
}

message HTTPListener {
  uint32 JobID = 1;
}

// [ commands ] ----------------------------------------
message Sessions {
  repeated Session Sessions = 1;
}

message RenameReq {
  string SessionID = 1;
  string BeaconID = 2;
  string Name = 3;
}

message GenerateReq {
  ImplantConfig Config = 1;
}

message Generate {
  commonpb.File File = 1;
}

message MSFReq {
  string Payload = 1;
  string LHost = 2;
  uint32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;

  commonpb.Request Request = 9;
}

message MSFRemoteReq {
  string Payload = 1;
  string LHost = 2;
  uint32 LPort = 3;
  string Encoder = 4;
  int32 Iterations = 5;
  uint32 PID = 8;

  commonpb.Request Request = 9;
}

enum StageProtocol {
  TCP = 0;
  HTTP = 1;
  HTTPS = 2;
}

message StagerListenerReq {
  StageProtocol Protocol = 1;
  string Host = 2;
  uint32 Port = 3;
  bytes Data = 4;
  bytes Cert = 5;
  bytes Key = 6;
  bool ACME = 7;
}

message StagerListener {
  uint32 JobID = 1;
}

message ShellcodeRDIReq {
  bytes Data = 1;
  string FunctionName = 2;
  string Arguments = 3;
}

message ShellcodeRDI {
  bytes Data = 1;
}

message MsfStagerReq {
  string Arch = 1;
  string Format = 2;
  uint32 Port = 3;
  string Host = 4;
  string OS = 5; // reserved for future usage
  StageProtocol Protocol = 6;
  repeated string BadChars = 7;
}

message MsfStager {
  commonpb.File File = 1;
}

// GetSystemReq - Client request to the server which is translated into
//                InvokeSystemReq when sending to the implant.
message GetSystemReq {
  string HostingProcess = 1;
  ImplantConfig Config = 2;

  commonpb.Request Request = 9;
}

// MigrateReq - Client request to the server which is translated into
//              InvokeMigrateReq when sending to the implant.
message MigrateReq {
  uint32 Pid = 1;
  ImplantConfig Config = 2;
  ShellcodeEncoder Encoder = 3;

  commonpb.Request Request = 9;
}

// [ Tunnels ] ----------------------------------------
message CreateTunnelReq {

  commonpb.Request Request = 9;
}

message CreateTunnel {
  uint32 SessionID = 1;

  uint64 TunnelID = 8 [jstype = JS_STRING];
}

message CloseTunnelReq {
  uint64 TunnelID = 8 [jstype = JS_STRING];

  commonpb.Request Request = 9;
}

// [ Pivots ] ----------------------------------------
message PivotGraphEntry {
  int64 PeerID = 1;
  Session Session = 2;
  string Name = 3;
  repeated PivotGraphEntry Children = 4;
}

message PivotGraph {
  repeated PivotGraphEntry Children = 1;
}

// [ Events ] ----------------------------------------
message Client {
  uint32 ID = 1;
  string Name = 2;

  Operator Operator = 3;
}

message Event {
  string EventType = 1;
  Session Session = 2;
  Job Job = 3;
  Client Client = 4;
  bytes Data = 5;

  string Err = 6; // Can't trigger normal gRPC error
}

message Operators { 
  repeated Operator Operators = 1;
}

message Operator {
  bool Online = 1;
  string Name = 2;
}

// [ Websites ] ----------------------------------------
message WebContent {
  string Path = 1;
  string ContentType = 2;
  uint64 Size = 3 [jstype = JS_STRING];

  bytes Content = 9;
}

message WebsiteAddContent {
  string Name = 1;
  map<string, WebContent> Contents = 2;
}

message WebsiteRemoveContent { 
  string Name = 1;
  repeated string Paths = 2;
}

message Website {
  string Name = 1;
  map<string, WebContent> Contents = 2;
}

message Websites {
  repeated Website Websites = 1;
}


// [ Wireguard ] ----------------------------------------

message WGClientConfig {
  string ServerPubKey = 1;
  string ClientPrivateKey = 2;
  string ClientPubKey = 3;
  string ClientIP = 4;
}


// [ Loot ] ----------------------------------------
enum FileType {
  NO_FILE = 0;
  BINARY = 1;
  TEXT = 2;
}

message Loot {
  string ID = 1;
  string Name = 2;
  FileType FileType = 3;
  string OriginHostID = 4;
  int64 Size = 5;

  commonpb.File File = 9;
}

message AllLoot {
  repeated Loot Loot = 1;
}

message Credential {
  string ID = 1;
  string Username = 2;
  string Plaintext = 3;

  string OriginHostID = 7;
}

message HashedCredential {
  string ID = 1;
  Credential Credential = 2;
  string Hash = 3;
  HashType HashType = 4;
  bool IsCracked = 5;

  string OriginHostID = 7;
}

enum HashType {
  MD5 = 0; // MD5 - zero must come first in an enum

  MD4 = 900; // MD4
  // MD5
  SHA1 = 100; // SHA1
  SHA2_224 = 1300; // SHA2-224
  SHA2_256 = 1400; // SHA2-256
  SHA2_384 = 10800; // SHA2-384
  SHA2_512 = 1700; // SHA2-512
  SHA3_224 = 17300; // SHA3-224
  SHA3_256 = 17400; // SHA3-256
  SHA3_384 = 17500; // SHA3-384
  SHA3_512 = 17600; // SHA3-512
  RIPEMD_160 = 6000; // RIPEMD-160   
  BLAKE2B_256 = 600; // BLAKE2b-512  
  GOST_R_32_11_2012_256 = 11700; // GOST R 34.11-2012 (Streebog) 256-bit, big-endian
  GOST_R_32_11_2012_512 = 11800; // GOST R 34.11-2012 (Streebog) 512-bit, big-endian
  GOST_R_34_11_94 = 6900; // GOST R 34.11-94 
  GPG = 17010; // GPG (AES-128/AES-256 (SHA-1($pass)))  
  HALF_MD5 = 5100; // Half MD5
  KECCAK_224 = 17700; // Keccak-224
  KECCAK_256 = 17800; // Keccak-256
  KECCAK_384 = 17900; // Keccak-384
  KECCAK_512 = 18000; // Keccak-512
  WHIRLPOOL = 6100; // Whirlpool
  SIPHASH = 10100; // SipHash
  MD5_UTF16LE = 70; // md5(utf16le($pass))
  SHA1_UTF16LE = 170; // sha1(utf16le($pass))
  SHA256_UTF16LE = 1470; // sha256(utf16le($pass))
  SHA384_UTF16LE = 10870; // sha384(utf16le($pass))
  SHA512_UTF16LE = 1770; // sha512(utf16le($pass))
  BLAKE2B_512_PW_SALT = 610; // BLAKE2b-512($pass.$salt)
  BLAKE2B_512_SALT_PW = 620; // BLAKE2b-512($salt.$pass)
  MD5_PW_SALT = 10; // md5($pass.$salt)
  MD5_SALT_PW = 20; // md5($salt.$pass)
  MD5_SALT_PW_SALT = 3800; // md5($salt.$pass.$salt)
  MD5_SALT_MD5_PW = 3710; // md5($salt.md5($pass))

  // ... TODO fill in the rest ...
  
  KERBEROS_17_TGS_REP = 19600; // Kerberos 5, etype 17, TGS-REP
  KERBEROS_17_PREAUTH = 19800; // Kerberos 5, etype 17, Pre-Auth
  KERBEROS_17_DB = 28800; // Kerberos 5, etype 17, DB
  KERBEROS_18_TGS_REP = 19700; // Kerberos 5, etype 18, TGS-REP
  KERBEROS_18_PREAUTH = 19900; // Kerberos 5, etype 18, Pre-Auth
  KERBEROS_18_DB = 28900; // Kerberos 5, etype 18, DB
  KERBEROS_23_SA_REQ_PREAUTH = 7500; // Kerberos 5, etype 23, AS-REQ Pre-Auth
  KERBEROS_23_TGS_REP = 13100; // Kerberos 5, etype 23, TGS-REP
  KERBEROS_23_AS_REP = 18200; // Kerberos 5, etype 23, AS-REP
  NET_NTLM_V1 = 5500; // NetNTLMv1 / NetNTLMv1+ESS
  NET_NTLM_V1_NT = 27000; // NetNTLMv1 / NetNTLMv1+ESS (NT)
  NET_NTLM_V2 = 5600; // NetNTLMv2
  NET_NTLM_V2_NT = 27100; // NetNTLMv2 (NT)

  // ...

  LM = 3000; // LM

  // ...

  NTLM = 1000; // NTLM

  // ...

  DCC = 1100; // Domain Cached Credentials (DCC), MS Cache
  DCC2 = 2100; // Domain Cached Credentials 2 (DCC2), MS Cache 2

  // ...

  MACOS_10_8 = 7100; // macOS v10.8+ (PBKDF2-SHA512)    

}

// [ Crackstation ] ----------------------------------------
message Crackstations {
  repeated Crackstation Crackstations = 1;
}

message Crackstation {
  string Name = 1;
  string OperatorName = 2;
  string GOOS = 3;  // The cracker's OS
  string GOARCH = 4;  // The cracker's Arch
  string HashcatVersion = 5;
  string HostUUID = 6;

  repeated CUDABackendInfo CUDA = 100;
  repeated MetalBackendInfo Metal = 101;
  repeated OpenCLBackendInfo OpenCL = 102;
}

message CUDABackendInfo {
  string Type = 1;
  int32 VendorID = 2;
  string Vendor = 3;
  string Name = 4;
  string Version = 5;
  int32 Processors = 6;
  int32 Clock = 7;
  string MemoryTotal = 8;
  string MemoryFree = 9;

  string CUDAVersion = 10;
}

message OpenCLBackendInfo {
  string Type = 1;
  int32 VendorID = 2;
  string Vendor = 3;
  string Name = 4;
  string Version = 5;
  int32 Processors = 6;
  int32 Clock = 7;
  string MemoryTotal = 8;
  string MemoryFree = 9;

  string OpenCLVersion = 10;
  string OpenCLDriverVersion = 11;
}

message MetalBackendInfo {
  string Type = 1;
  int32 VendorID = 2;
  string Vendor = 3;
  string Name = 4;
  string Version = 5;
  int32 Processors = 6;
  int32 Clock = 7;
  string MemoryTotal = 8;
  string MemoryFree = 9;

  string MetalVersion = 10;
}

enum CrackAttackMode {
  STRAIGHT = 0;
  COMBINATION = 1;
  BRUTEFORCE = 3;
  HYBRID_WORDLIST_MASK = 6;
  HYBRID_MASK_WORDLIST = 7;
  ASSOCIATION = 9;
}

enum CrackEncoding {
  INVALID_ENCODING = 0;
  ISO_8859_15 = 1;
  UTF_32LE = 2;
}

enum CrackOutfileFormat {
  INVALID_FORMAT = 0;
  HASH_SALT = 1;  // 1 | hash[:salt]
  PLAIN = 2; // 2 | plain
  HEX_PLAIN = 3; // 3 | hex_plain
  CRACK_POS = 4; // 4 | crack_pos
  TIMESTAMP_ABSOLUTE = 5; // 5 | timestamp absolute
  TIMESTAMP_RELATIVE = 6; // 6 | timestamp relative
}

enum CrackWorkloadProfile {
  INVALID_WORKLOAD_PROFILE = 0;
  LOW = 1;
  DEFAULT = 2;
  HIGH = 3;
  NIGHTMARE = 4;
}

message CrackTask {
  CrackAttackMode AttackMode = 1;
  HashType HashType = 2;
  repeated string Hashes = 3;
  // --version
  // --help
  bool Quiet = 4;
  bool HexCharset = 5;
  bool HexSalt = 6;
  bool HexWordlist = 7;
  bool Force = 8;
  bool DeprecatedCheckDisable = 9;
  bool Status = 10;
  bool StatusJSON = 11;
  uint32 StatusTimer = 12;
  uint32 StdinTimeoutAbort = 13;
  bool MachineReadable = 14;
  bool KeepGuessing = 15;
  bool SelfTestDisable = 16;
  bool Loopback = 17;
  bytes MarkovHcstat2 = 18; // --markov-hcstat2 FILE
  bool MarkovDisable = 19;
  bool MarkovClassic = 20;
  bool MarkovInverse = 21;
  uint32 MarkovThreshold = 22;
  uint32 Runtime = 23;
  string Session = 24;
  bool Restore = 25;
  bool RestoreDisable = 26;
  bytes RestoreFile = 27; // --restore-file-path FILE
  // --outfile FILE (28)
  repeated CrackOutfileFormat OutfileFormat = 29;
  bool OutfileAutohexDisable = 30;
  uint32 OutfileCheckTimer = 31;
  bool WordlistAutohexDisable = 32;
  string Seperator = 33;
  bool Stdout = 34;
  bool Show = 35;
  bool Left = 36;
  bool Username = 37;
  bool Remove = 38;
  uint32 RemoveTimer = 39;
  bool PotfileDisable = 40;
  bytes Potfile = 41; // --potfile-path FILE
  CrackEncoding EncodingFrom = 42;
  CrackEncoding EncodingTo = 43;
  uint32 DebugMode = 44;
  // --debug-file FILE (45)
  // --induction-dir DIR (46)
  // --outfile-check-dir DIR (47)
  bool LogfileDisable = 48;
  uint32 HccapxMessagePair = 49;
  uint32 NonceErrorCorrections = 50;
  bytes KeyboardLayoutMapping = 51; // --keyboard-layout-mapping FILE
  // --truecrypt-keyfiles FILE (52)
  // --veracrypt-keyfiles FILE (53)
  // --veracrypt-pim-start PIM (54)
  // --veracrypt-pim-stop PIM (55)
  bool Benchmark = 56;
  bool BenchmarkAll = 57;
  bool SpeedOnly = 58;
  bool ProgressOnly = 59;
  uint32 SegmentSize = 60;
  uint32 BitmapMin = 61;
  uint32 BitmapMax = 62;
  repeated uint32 CPUAffinity = 63;
  uint32 HookThreads = 64;
  bool HashInfo = 65;
  // --example-hashes (66)
  bool BackendIgnoreCUDA = 67;
  bool BackendIgnoreHip = 68;
  bool BackendIgnoreMetal = 69;
  bool BackendIgnoreOpenCL = 70;
  bool BackendInfo = 71;
  repeated uint32 BackendDevices = 72;
  repeated uint32 OpenCLDeviceTypes = 73;
  bool OptimizedKernelEnable = 74;
  bool MultiplyAccelDisabled = 75;
  CrackWorkloadProfile WorkloadProfile = 76;
  uint32 KernelAccel = 77;
  uint32 KernelLoops = 78;
  uint32 KernelThreads = 79;
  uint32 BackendVectorWidth = 80;
  uint32 SpinDamp = 81;
  bool HwmonDisable = 82;
  uint32 HwmonTempAbort = 83;
  uint32 ScryptTMTO = 84;
  uint64 Skip = 85;
  uint64 Limit = 86;
  bool Keyspace = 87;
  // --rule-left (88)
  // --rule-right (89)
  bytes RulesFile = 90; // --rules-file FILE
  uint32 GenerateRules = 91;
  uint32 GenerateRulesFunMin = 92;
  uint32 GenerateRulesFunMax = 93;
  string GenerateRulesFuncSel = 94;
  int32 GenerateRulesSeed = 95;
  string CustomCharset1 = 96;
  string CustomCharset2 = 97;
  string CustomCharset3 = 98;
  string CustomCharset4 = 99;
  string Identify = 100;
  bool Increment = 101;
  uint32 IncrementMin = 102;
  uint32 IncrementMax = 103;
  bool SlowCandidates = 104;
  bool BrainServer = 105;
  uint32 BrainServerTimer = 106;
  bool BrainClient = 107;
  string BrainClientFeatures = 108;
  string BrainHost = 109;
  uint32 BrainPort = 110;
  string BrainPassword = 111;
  string BrainSession = 112;
  string BrainSessionWhitelist = 113;
}

// [ Hosts ] ----------------------------------------
message IOC {
  string Path = 1;
  string FileHash = 2;
  string ID = 3;
}

message ExtensionData {
  string Output = 1;
}

message Host {
  string Hostname = 1;
  string HostUUID = 2;
  string OSVersion = 3;

  repeated IOC IOCs = 4;
  map<string, ExtensionData> ExtensionData = 5;

  string Locale = 6;
  int64 FirstContact = 7;
}

message AllHosts {
  repeated Host Hosts = 1;
}

// [ Dll Hijack ] ----------------------------------------
message DllHijackReq {
  string ReferenceDLLPath = 1;
  string TargetLocation = 2;
  bytes ReferenceDLL = 3;
  bytes TargetDLL = 4;
  string ProfileName = 5;

  commonpb.Request Request = 9;
}

message DllHijack {
  commonpb.Response Response = 9;
}


// [ Shellcode ] ----------------------------------------
enum ShellcodeEncoder {
  NONE = 0;
  SHIKATA_GA_NAI = 1;
}

message ShellcodeEncodeReq {
  ShellcodeEncoder Encoder = 1;
  string Architecture = 2;
  uint32 Iterations = 3;
  bytes BadChars = 4;

  bytes Data = 8;
  commonpb.Request Request = 9;
}

message ShellcodeEncode {

  bytes Data = 8;
  commonpb.Response Response = 9;
}

message ShellcodeEncoderMap {
  map<string, ShellcodeEncoder> Encoders = 1;
}

// [ Builder ] ----------------------------------------
message ExternalGenerateReq {
  ImplantConfig Config = 1;
  string BuilderName = 2;
}


message Builders {
  repeated Builder Builders = 1;
}

message Builder {
  string Name = 1;
  string OperatorName = 2;
  string GOOS = 3;  // The builder's OS
  string GOARCH = 4;  // The builder's Arch
  repeated string Templates = 5;
  repeated CompilerTarget Targets = 6;
  repeated CrossCompiler CrossCompilers = 7;
}
