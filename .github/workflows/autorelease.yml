name: Release

on:
  push:
    tags: v[1-9]+.[0-9]+.[0-9]+
    branches: master

jobs:

  linux-windows-build:
    name: Linux & Windows Build
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:

    - name: Go 1.15
      uses: actions/setup-go@v1
      with:
        go-version: 1.15
      id: go
    
    - name: OS Packages 
      run: |
        sudo apt-get update --fix-missing && sudo apt-get -y install \
        git build-essential zlib1g zlib1g-dev wget zip unzip \
        mingw-w64 binutils-mingw-w64 g++-mingw-w64

    - name: Protoc
      env:
        PROTOC_VER: 3.11.4
      run: |
        wget -O protoc-${PROTOC_VER}-linux-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VER}/protoc-${PROTOC_VER}-linux-x86_64.zip \
        && unzip protoc-${PROTOC_VER}-linux-x86_64.zip \
        && sudo cp -vv ./bin/protoc /usr/local/bin/protoc

    - name: Protoc-gen-go
      env:
        PROTOC_GEN_GO_VER: 1.3.5
      run: |
        wget -O protoc-gen-go.tar.gz https://github.com/golang/protobuf/archive/v${PROTOC_GEN_GO_VER}.tar.gz \
        && tar xvf protoc-gen-go.tar.gz \
        && cd protobuf-${PROTOC_GEN_GO_VER} \
        && make install

    - name: Packr
      run: go get -u github.com/gobuffalo/packr/packr

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Go Assets
      run: ./go-assets.sh

    - name: Make
      run: export PATH=/home/runner/go/bin/:$PATH && make linux && make static-linux
  
    - name: Linux Client Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sliver-client_linux
        path: ./sliver-client

    - name: Linux Server Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sliver-server_linux
        path: ./sliver-server

    - name: Make Windows
      run: export PATH=/home/runner/go/bin/:$PATH && make windows && make static-windows

    - name: Windows Client Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sliver-client_windows.exe
        path: ./sliver-client.exe

    - name: Windows Server Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sliver-server_windows.exe
        path: ./sliver-server.exe


  macos-build:
    name: MacOS Build
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: macos-latest
    steps:

    - name: Go 1.15
      uses: actions/setup-go@v1
      with:
        go-version: 1.15
      id: go

    - name: Mingw
      run: brew install mingw-w64

    - name: Protoc
      env:
        PROTOC_VER: 3.11.4
      run: |
        wget -O protoc-${PROTOC_VER}-osx-x86_64.zip https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOC_VER}/protoc-${PROTOC_VER}-osx-x86_64.zip \
        && unzip protoc-${PROTOC_VER}-osx-x86_64.zip \
        && sudo cp -vv ./bin/protoc /usr/local/bin/protoc

    - name: Protoc-gen-go
      env:
        PROTOC_GEN_GO_VER: 1.3.5
      run: |
        wget -O protoc-gen-go.tar.gz https://github.com/golang/protobuf/archive/v${PROTOC_GEN_GO_VER}.tar.gz \
        && tar xvf protoc-gen-go.tar.gz \
        && cd protobuf-${PROTOC_GEN_GO_VER} \
        && make install

    - name: Packr
      run: go get -u github.com/gobuffalo/packr/packr

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Go Assets
      run: ./go-assets.sh

    - name: Make
      run: export PATH=/Users/runner/go/bin/:$PATH && make macos && make static-macos
    
    - name: MacOS Client Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sliver-client_macos
        path: ./sliver-client

    - name: MacOS Server Artifact
      uses: actions/upload-artifact@v2
      with:
        name: sliver-server_macos
        path: ./sliver-server


  tagged-release:

    needs: [linux-windows-build, macos-build]

    name: "Tagged Release"
    if: startsWith( github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
    - run: mkdir -p ./release && mkdir -p ./artifacts
    - uses: actions/download-artifact@v2
      with:
        path: ./artifacts

    # Linux
    - name: Package Linux
      run: |
        mkdir -p /tmp/linux
        cp ./artifacts/sliver-server_linux /tmp/linux/sliver-server
        cp ./artifacts/sliver-client_linux /tmp/linux/sliver-client
        zip ./release/sliver-server_linux.zip /tmp/linux/sliver-server
        zip ./release/sliver-client_linux.zip /tmp/linux/sliver-client

    # Windows
    - name: Package Windows
      run: |
        mkdir -p /tmp/windows
        cp ./artifacts/sliver-server_windows /tmp/windows/sliver-server.exe
        cp ./artifacts/sliver-client_windows /tmp/windows/sliver-client.exe
        zip ./release/sliver-server_windows.zip /tmp/windows/sliver-server.exe
        zip ./release/sliver-client_windows.zip /tmp/windows/sliver-client.exe

    # MacOS
    - name: Package MacOS
      run: |
        mkdir -p /tmp/macos
        cp ./artifacts/sliver-server_macos /tmp/macos/sliver-server
        cp ./artifacts/sliver-client_macos /tmp/macos/sliver-client
        zip ./release/sliver-server_macos.zip /tmp/macos/sliver-server
        zip ./release/sliver-client_macos.zip /tmp/macos/sliver-client
  
    - name: "Publish Release"
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        prerelease: false
        files: |
          ./release/*.zip
